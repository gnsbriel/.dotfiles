{
    // Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "printf Colors": {
        "prefix": "colors",
        "body": [
            "# Colors",
            "readonly cyan='\\033[0;36m'        # Title",
            "readonly red='\\033[0;31m'         # Error",
            "readonly yellow='\\033[1;33m'      # Warning",
            "readonly purple='\\033[0;35m'      # Alert",
            "readonly blue='\\033[0;34m'        # Attention",
            "readonly light_gray='\\033[0;37m'  # Option",
            "readonly green='\\033[0;32m'       # Done",
            "readonly reset='\\033[0m'          # No color, end of sentence",
            "",
            "# %b - Print the argument while expanding backslash escape sequences.",
            "# %q - Print the argument shell-quoted, reusable as input.",
            "# %d, %i - Print the argument as a signed decimal integer.",
            "# %s - Print the argument as a string.",
            "",
            "#Syntax:",
            "#    printf \"'%b' 'TEXT' '%s' '%b'\\n\" \"\\${color}\" \"\\${var}\" \"\\${reset}\"",
            "$0"
        ],
        "description": "Set color variables to use with printf"
    },
    "printf": {
        "prefix": "printf",
        "body": [
            "printf \"%b${1:TEXT}%s%b\\n\" \"\\${${2:color}}\"${3: \"\\${${4:var}\\}\"} \"\\${reset}\"",
            "${5:sleep ${6:seconds}}",
            "$0"
        ],
        "description": "printf syntax"
    },
    "Shebang": {
        "prefix": "shebang",
        "body": [
            "#/bin/bash",
            "",
            "$0"
        ],
        "description": "printf syntax"
    },
    "mkbackup": {
        "prefix": "mkbackup",
        "body": [
            "function mkbackup() {",
            "",
            "    if [ ! -d \"\\${PWD}\"/.Backup ]; then mkdir \"\\${PWD}\"/.Backup; fi",
            "",
            "    case \"\\${1}\" in",
            "        -f | --file )",
            "            shift",
            "            if [ ! -f \"\\${PWD}\"/.Backup/\"\\${1##*/}\" ]; then",
            "                cp --verbose \"\\${1}\" \"\\${PWD}\"/.Backup/ && printf \"%bFile '%s' successfully backed-up !%b\\n\" \"\\${green}\" \"\\${1##*/}\" \"\\${reset}\" || printf \"%bCould not backup '%s' !%b\\n\" \"\\${red}\" \"\\${1##*/}\" \"\\${reset}\"",
            "            fi",
            "            ;;",
            "        -d | --directory )",
            "            shift",
            "            if [ ! -d \"\\${PWD}\"/.Backup/\"\\${1##*/}\" ]; then",
            "                cp --verbose --recursive \"\\${1}\" \"\\${PWD}\"/.Backup/ && printf \"%bDirectory '%s' successfully backed-up !%b\\n\" \"\\${green}\" \"\\${1##*/}\" \"\\${reset}\" || printf \"%b could not backup '%s' !%b\\n\" \"\\${red}\" \"\\${1##*/}\" \"\\${reset}\"",
            "            fi",
            "            ;;",
            "        * )",
            "            echo \"\"",
            "            echo \"Syntax: mkbackup [OPTION..] [PATH..]\"",
            "            echo \"\"",
            "            echo \"Options:\"",
            "            echo \"-f, --file\"",
            "            echo \"-d, --directory\"",
            "            exit 0",
            "            ;;",
            "    esac",
            "",
            "}",
        ],
        "description": "make backup"
    },
    "Function": {
        "prefix": "function",
        "body": [
            "function ${1:NAME}() {",
            "\t${0::}",
            "}",
        ],
        "description": "Function syntax"
    },
    "Variable": {
        "prefix": "var",
        "body": [
            "\"\\${${0:var}}\"",
        ],
        "description": "Insert new variable syntax"
    },
    "Section": {
        "prefix": "section",
        "body": [
            "# Section: ----- ${1:Section} -----",
            "$0",
        ],
        "description": "Insert new section"
    },
    "Case": {
        "prefix": "case",
        "body": [
            "case \"\\${${1:VAR}}\" in",
            "    ${2:OPTION} )",
            "        $0",
            "        ;;",
            "esac",
        ],
        "description": "Insert new section"
    },
    "Create file and folder": {
        "prefix": "mkfile",
        "body": [
            "function mkfile() {",
            "",
            "    if [ \"\\${#}\" -ne \"1\" ]; then",
            "        printf \"%bIncorrect use of 'mkfile' Function !%b\\nSyntax:\\vmkfile [PATH]... ;%b\" \"\\${red}\" \"\\${light_gray}\" \"\\${reset}\" 1>&2",
            "        exit 2",
            "    fi",
            "",
            "    # Create File and Folder if needed",
            "    mkdir --parents --verbose \"\\$(dirname \"\\${1}\")\" && touch \"\\${1}\" || exit 2",
            "",
            "}",
        ],
        "description": "printf syntax"
    },
    "Timer": {
        "prefix": "timer",
        "body": [
            "function timer() {",
            "",
            "    if [ \"\\${#}\" == \"\" ]; then",
            "        printf \"%bIncorrect use of 'timer' Function !%b\\nSyntax:\\vtimer 'PHRASE';%b\\n\" \"\\${purple}\" \"\\${light_gray}\" \"\\${reset}\" 1>&2",
            "        exit 2",
            "    fi",
            "",
            "    printf \"%b%s%b\\n\" \"\\${blue}\" \"\\${*}\" \"\\${reset}\"",
            "    local duration=5  # In seconds",
            "    while [ ! \"\\${duration}\" == 0 ]; do",
            "        printf \"%bContinuing in: %s%b\\r\" \"\\${light_gray}\" \"\\${duration}\" \"\\${reset}\"",
            "        ((--duration))",
            "        sleep 1",
            "    done",
            "    printf \"\\n\"",
            "",
            "}",
            "$0"
        ],
        "description": "printf syntax"
    }
}
