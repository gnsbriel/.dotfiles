{
    "Shebang": {
        "prefix": "shebang",
        "body": [
            "#!/bin/bash",
            "",
            "$0"
        ],
        "description": "Bash shebang"
    },

    "Header": {
        "prefix": "header",
        "body": [
            "# ${1:DESCRIPTION}",
            "#",
            "# Copyright 2023 Gabriel Nascimento",
            "#",
            "# This program is free software: you can redistribute it and/or modify",
            "# it under the terms of the GNU General Public License as published by",
            "# the Free Software Foundation, either version 3 of the License, or",
            "# (at your option) any later version.",
            "#",
            "# This program is distributed in the hope that it will be useful,",
            "# but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "# GNU General Public License for more details.",
            "#",
            "# You should have received a copy of the GNU General Public License",
            "# along with this program. If not, see <http://www.gnu.org/licenses/>.",
            "$0"
        ],
        "description": "Header"
    },

    "Printf Colors": {
        "prefix": "colors",
        "body": [
            "# Colors",
            "readonly cyan='\\033[0;36m'",
            "readonly red='\\033[0;31m'",
            "readonly yellow='\\033[1;33m'",
            "readonly purple='\\033[0;35m'",
            "readonly blue='\\033[0;34m'",
            "readonly light_gray='\\033[0;37m'",
            "readonly green='\\033[0;32m'",
            "readonly nc='\\033[0m'",
            "",
            "# %b - Print the argument while expanding backslash escape sequences.",
            "# %q - Print the argument shell-quoted, reusable as input.",
            "# %d, %i - Print the argument as a signed decimal integer.",
            "# %s - Print the argument as a string.",
            "# printf \"'%b' 'TEXT' '%s' '%b'\\n\" \"\\${color}\" \"\\${var}\" \"\\${reset}\"",
            "$0"
        ],
        "description": "Color variables"
    },

    "Section": {
        "prefix": "section",
        "body": [
            "# {{{ ${1:session}",
            "",
            "$0",
            "# }}}"
        ],
        "description": "Section"
    },

    "Create": {
        "prefix": "create",
        "body": [
            "function create() {",
            "",
            "    local option=\"\\${1}\"; shift",
            "    local path=( \"\\${@}\" )",
            "",
            "    case \"\\${option}\" in",
            "        -f | --file )",
            "            for file in \"\\${path[@]}\"; do",
            "                [ -f \"\\${file}\" ] && return",
            "                mkdir --parents --verbose \"\\$(dirname \"\\${file}\")\" \\",
            "                    && touch \"\\${file}\" || exit 2",
            "            done",
            "            ;;",
            "        -d | --directory )",
            "            for dir in \"\\${path[@]}\"; do",
            "                [ -d \"\\${dir}\" ] && return",
            "                mkdir --parents --verbose \"\\${dir}\" || exit 2",
            "            done",
            "            ;;",
            "        * )",
            "            echo \"\"",
            "            echo \"Syntax: create [OPTION..] [PATH..]\"",
            "            echo \"\"",
            "            echo \"Options:\"",
            "            echo \"-f, --file\"",
            "            echo \"-d, --directory\"",
            "            exit 0",
            "            ;;",
            "    esac",
            "}"
        ],
        "description": [
            "Function used to create a new file or folder while acception multiple paths",
            "and allowing to create any parenting folders."
        ]
    },

    "Countdown": {
        "prefix": "countdown",
        "body": [
            "function countdown() {",
            "",
            "    if [ \"\\${#}\" == \"\" ]; then",
            "        echo \"Syntax: countdown [PHRASE..]\"",
            "        exit 2",
            "    fi",
            "",
            "    printf \"%b%s%b\\n\" \"\\${blue}\" \"\\${*}\" \"\\${nc}\"",
            "    local seconds=5  # In seconds",
            "    while [ ! \"\\${seconds}\" == 0 ]; do",
            "        printf \"%bContinuing in: %s%b\\r\" \"\\${light_gray}\" \"\\${seconds}\" \"\\${nc}\"",
            "        ((--seconds))",
            "        sleep 1",
            "    done",
            "    printf \"\\n\"",
            "}",
        ],
        "description": [
            "Function used to output a countdown timer with a custom phrase."
        ]
    },

    "Printf": {
        "prefix": "printf",
        "body": [
            "printf \"%b${1:TEXT}%b\\n\" \"\\${${2:color}}\" \"\\${nc}\"",
            "$0"
        ],
        "description": "Printf syntax"
    },

    "Function": {
        "prefix": "function",
        "body": [
            "function ${1:myfunc}() {",
            "\t${0::}",
            "}",
        ],
        "description": "Function syntax"
    },

    "VariableA": {
        "prefix": "vara",
        "body": [
            "\"\\${${0:VAR}}\"",
        ],
        "description": "Variable with quotes"
    },
    "VariablB": {
        "prefix": "varb",
        "body": [
            "\\${${0:var}}",
        ],
        "description": "Variable without quotes"
    },

    "Case": {
        "prefix": "case",
        "body": [
            "case \"\\${${1:VAR}}\" in",
            "    ${2:OPTION} )",
            "        $0",
            "        ;;",
            "esac",
        ],
        "description": "Case syntax"
    },

    "For Loop": {
        "prefix": "for",
        "body": [
            "for ${1:i} in \\${${2:arr}}; do",
            "   ${0::}",
            "done",
        ],
        "description": "For Loop syntax"
    },

    "While": {
        "prefix": "while",
        "body": [
            "while ${1:[[ ${2:condition} ]]}; do",
            "   ${0::}",
            "done",
        ],
        "description": "While Loop syntax"
    },

    "IF": {
        "prefix": "if",
        "body": [
            "if ${1:[[ ${2:condition} ]]}; then",
            "   ${0::}",
            "fi",
        ],
        "description": "IF syntax"
    },

    "Elif": {
        "prefix": "elif",
        "body": [
            "elif ${1:[[ ${2:condition} ]]}; then",
            "   ${0::}"
        ],
        "description": "Elif syntax"
    },

    "Else": {
        "prefix": "else",
        "body": [
            "else",
            "   ${0::}"
        ],
        "description": "Else syntax"
    },

    "Testand": {
        "prefix": "testand",
        "body": [
            "[[ ${1:condition} ]] \\",
            "    && ${0:$(command)}"
        ],
        "description": "Test && syntax"
    },

    "Testor": {
        "prefix": "testor",
        "body": [
            "[[ ${1:condition} ]] \\",
            "    || ${0:$(command)}"
        ],
        "description": "Test || syntax"
    },

    "Testandor": {
        "prefix": "testandor",
        "body": [
            "[[ ${1:condition} ]] \\",
            "    && ${2:$(command)} \\",
            "    || ${0:$(command)}"
        ],
        "description": "Test && || syntax"
    },

    "Command": {
        "prefix": "cmd",
        "body": [
            "\\$(${0:command})"
        ],
        "description": "Test && || syntax"
    }

}
