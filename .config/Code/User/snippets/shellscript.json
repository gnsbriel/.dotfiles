{
    "shebang": {
        "prefix": "shebang",
        "body": [
            "#!/bin/bash",
        ],
        "description": "shebang"
    },
    "echo": {
        "prefix": "e",
        "body": [
            "echo \"${0:Hello World}\"",
        ],
        "description": "echo"
    },
    "printf": {
        "prefix": "printf",
        "body": [
            "printf \"%b${1:TEXT}%b\\n\" \"\\${${2:color:-}}\" \"\\${nc:-}\"",
        ],
        "description": "printf syntax"
    },
    "function": {
        "prefix": "function",
        "body": [
            "function ${1:myfunc}() {",
            "\t:$0",
            "}",
        ],
        "description": "function"
    },
    "function with definitions": {
        "prefix": "functiond",
        "body": [
            "#######################################",
            "# DESCRIPTION:",
            "#     Brief description of the operation.",
            "# GLOBALS:",
            "#     A list of global or modified variables.",
            "# ARGUMENTS:",
            "#     The expected input arguments.",
            "# OUTPUTS:",
            "#     What the process outputs to the terminal.",
            "# RETURN:",
            "#     0 if success, non-zero otherwise.",
            "#######################################",
            "function ${1:myfunc}() {",
            "\t:$0",
            "}"
        ],
        "description": "Function with definitions"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ${1:[[ ${2:...} ]]}; then",
            "\t:$0",
            "fi",
        ],
        "description": "if block"
    },
    "if else": {
        "prefix": "ifelse",
        "body": [
            "if ${1:[[ ${2:...} ]]}; then",
            "\t:$3",
            "else",
            "\t:$0",
            "fi",
        ],
        "description": "if else block"
    },
    "elif": {
        "prefix": "elif",
        "body": [
            "elif ${1:[[ ${2:...} ]]}; then",
            "\t:$0"
        ],
        "description": "elif block"
    },
    "until": {
        "prefix": "until",
        "body": [
            "until ${1:[[ ${2:...} ]]}; do",
            "\t:$0",
            "done"
        ],
        "description": "until block"
    },
    "main": {
        "prefix": "main",
        "body": [
          "function main() {",
          "\t:$0",
          "}",
          "",
          "main \"${@}\""
        ],
        "description": "a main function declaration with passthrough of all paramters passed to the script"
    },
    "const": {
        "prefix": "const",
        "body": [
            "local -r ${1:var}=${2:\"${0}\"}"
        ],
        "description": "creates a local readonly variable (this is meant for use within functions only)"
    },
    "command": {
        "prefix": "cmd",
        "body": [
            "\\$(${0:command})"
        ],
        "description": "command block"
    },
    "case": {
        "prefix": "case",
        "body": [
            "case \"\\${${1:VAR}}\" in",
            "\t${2:OPTION} )",
            "\t\t:$0",
            "\t\t;;",
            "esac",
        ],
        "description": "case block"
    },
    "for loop": {
        "prefix": "for",
        "body": [
            "for ${1:i} in \\${${2:arr}}; do",
            "\t:$0",
            "done",
        ],
        "description": "for loop"
    },
    "c-like for loop": {
        "prefix": "for",
        "body": [
            "for ((i = 0 ; i < 100 ; i++)); do",
            "\t:$0",
            "done",
        ],
        "description": "c-like for loop"
    },
    "while loop": {
        "prefix": "while",
        "body": [
            "while ${1:[[ ${2:condition} ]]}; do",
            "\t:$0",
            "done",
        ],
        "description": "while loop"
    },
    "quoted variable": {
        "prefix": "var",
        "body": [
            "\"\\${${0:VAR}}\"",
        ],
        "description": "variable with quotes"
    },
    "unquoted variable": {
        "prefix": "varu",
        "body": [
            "\\${${0:var}}",
        ],
        "description": "variable without quotes"
    },
    "test conditional": {
        "prefix": "test",
        "body": [
            "[[ ${1:condition} ]] \\",
            "\t${2:&& or ||} :$0"
        ],
        "description": "test conditional"
    },
    "substitution": {
        "prefix": "substitution",
        "body": [
            "# \"\\${var%suffix}\"    # Remove suffix",
            "# \"\\${var#prefix}\"    # Remove prefix",
            "# \"\\${var%%suffix}\"   # Remove long suffix",
            "# \"\\${var/%suffix}\"   # Remove long suffix",
            "# \"\\${var##prefix}\"   # Remove long prefix",
            "# \"\\${var/#prefix}\"   # Remove long prefix",
            "# \"\\${var/from/to}\"   # Replace first match",
            "# \"\\${var//from/to}\"  # Replace all",
            "# \"\\${var/%from/to}\"  # Replace suffix",
            "# \"\\${var/#from/to}\"  # Replace prefix"
        ],
        "description": "list of substitution"
    },
    "uppercase": {
        "prefix": "uppercase",
        "body": [
            "\"\\${str^^}\"  # => \"HELLO WORLD!\"",
        ],
        "description": "uppercase"
    },
    "lowercase": {
        "prefix": "lowercase",
        "body": [
            "\"\\${str,,}\"  # => \"hello world!\"",
        ],
        "description": "lowercase"
    },
    "read line": {
        "prefix": "readline",
        "body": [
        "while IFS=\"\" read -r ${1:line} || [ -n \"\\${${1:line}}\" ]; do",
        "\t:$0",
        "done < ${2:file.txt}"
        ],
        "description": "read file line"
    },
    "array": {
        "prefix": "array",
        "body": [
            "${1:arr}=(\"${2:A}\" \"${0:B}\")"
        ],
        "description": "array"
    },
    "subshell": {
        "prefix": "subshell",
        "body": [
            "(",
            "\t:$0",
            ")"
        ],
        "description": "subshell"
    },





    "Header": {
        "prefix": "header",
        "body": [
            "#",
            "# ${1:DESCRIPTION}",
            "#",
            "# Copyright 2023 Gabriel Nascimento",
            "#",
            "# This program is free software: you can redistribute it and/or modify",
            "# it under the terms of the GNU General Public License as published by",
            "# the Free Software Foundation, either version 3 of the License, or",
            "# (at your option) any later version.",
            "#",
            "# This program is distributed in the hope that it will be useful,",
            "# but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "# GNU General Public License for more details.",
            "#",
            "# You should have received a copy of the GNU General Public License",
            "# along with this program. If not, see <http://www.gnu.org/licenses/>.",
            "$0"
        ],
        "description": "Header"
    },
    "Printf Colors": {
        "prefix": "colors",
        "body": [
            "# Colors",
            "readonly cyan='\\033[0;36m'",
            "readonly red='\\033[0;31m'",
            "readonly yellow='\\033[1;33m'",
            "readonly purple='\\033[0;35m'",
            "readonly blue='\\033[0;34m'",
            "readonly light_gray='\\033[0;37m'",
            "readonly green='\\033[0;32m'",
            "readonly nc='\\033[0m'",
            "",
            "# %b - Print the argument while expanding backslash escape sequences.",
            "# %q - Print the argument shell-quoted, reusable as input.",
            "# %d, %i - Print the argument as a signed decimal integer.",
            "# %s - Print the argument as a string.",
            "# printf \"'%b' 'TEXT' '%s' '%b'\\n\" \"\\${color}\" \"\\${var}\" \"\\${nc}\"",
            "$0"
        ],
        "description": "Color variables"
    },
    "Template": {
        "prefix": "template",
        "body": [
            "#!/bin/bash",
            "#",
            "# ${1:DESCRIPTION}",
            "# This script will install all dotfiles/configs in their correct folder",
            "# based on the chosen system.",
            "#",
            "# Copyright 2023 Gabriel Nascimento",
            "#",
            "# This program is free software: you can redistribute it and/or modify",
            "# it under the terms of the GNU General Public License as published by",
            "# the Free Software Foundation, either version 3 of the License, or",
            "# (at your option) any later version.",
            "#",
            "# This program is distributed in the hope that it will be useful,",
            "# but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "# GNU General Public License for more details.",
            "#",
            "# You should have received a copy of the GNU General Public License",
            "# along with this program. If not, see <http://www.gnu.org/licenses/>.",
            "",
            "# Options",
            "set -o errexit   # Used to exit upon error, avoiding cascading errors",
            "set -o nounset   # Exposes unset variables",
            "set -o pipefail  # Unveils hidden failures",
            "set +o xtrace    # Trace what gets executed (Debug)",
            "trap ctrl_c INT  # Trap CTRL + C and call ctrl_c",
            "",
            "# Colors",
            "readonly cyan='\\033[0;36m'",
            "readonly red='\\033[0;31m'",
            "readonly yellow='\\033[1;33m'",
            "readonly purple='\\033[0;35m'",
            "readonly blue='\\033[0;34m'",
            "readonly light_gray='\\033[0;37m'",
            "readonly green='\\033[0;32m'",
            "readonly nc='\\033[0m'",
            "",
            "# %b - Print the argument while expanding backslash escape sequences.",
            "# %q - Print the argument shell-quoted, reusable as input.",
            "# %d, %i - Print the argument as a signed decimal integer.",
            "# %s - Print the argument as a string.",
            "# printf \"'%b' 'TEXT' '%s' '%b'\\n\" \"\\${color}\" \"\\${var}\" \"\\${nc}\"",
            "",
            "# Variable definitions",
            "script_path=\"\\$(dirname \"\\${0}\")\"                   ; readonly script_path",
            "dotconfig=\"\\${XDG_CONFIG_HOME:-\\${HOME}/.config}\"   ; readonly dotconfig",
            "dotlocal=\"\\${XDG_DATA_HOME:-\\${HOME}/.local/share}\" ; readonly dotlocal",
            "",
            "# Help Message",
            "function helpmsg() {",
            "",
            "   echo \"\"",
            "   echo \"Usage: ./\\${0##*/} [OPTION]...\"",
            "   echo \"\"",
            "   echo \"Options:\"",
            "   echo \"-h, --help     Print this help message.\"",
            "   echo \"\"",
            "   echo \"OPTION1        DESC\"",
            "   echo \"OPTION2        DESC\"",
            "}",
            "",
            "# Other functions",
            "",
            "# shellcheck disable=SC2317",
            "function ctrl_c() {",
            "    # echo \"** Trapped CTRL-C\"",
            "    exit 0",
            "}",
            "",
            "# Main Program",
            "function main() {",
            "",
            "    while true; do",
            "        case \"\\${1}\" in",
            "            -h | --help )",
            "                helpmsg",
            "                exit 0",
            "                ;;",
            "            OPTION )",
            "                :",
            "                ;;",
            "            * )",
            "                helpmsg",
            "                exit 0",
            "                ;;",
            "        esac",
            "    done",
            "}",
            "[[ \"\\${1}\" == \"--\" ]] && shift",
            "",
            "cd \"\\${script_path}\"  # cd to executable path",
            "main \"\\${@}\"",
            "",
        ],
        "description": "Program template"
    },
    "Create": {
        "prefix": "create",
        "body": [
            "function create() {",
            "",
            "    local option=\"\\${1}\"; shift",
            "    local path=( \"\\${@}\" )",
            "",
            "    case \"\\${option}\" in",
            "        -f | --file )",
            "            for file in \"\\${path[@]}\"; do",
            "                [[ -f \"\\${file}\" ]] && return",
            "                mkdir --parents --verbose \"\\$(dirname \"\\${file}\")\" \\",
            "                    && touch \"\\${file}\" || exit 2",
            "            done",
            "            ;;",
            "        -d | --directory )",
            "            for dir in \"\\${path[@]}\"; do",
            "                [[ -d \"\\${dir}\" ]] && return",
            "                mkdir --parents --verbose \"\\${dir}\" || exit 2",
            "            done",
            "            ;;",
            "        * )",
            "            echo \"\"",
            "            echo \"Syntax: create [OPTION..] [PATH..]\"",
            "            echo \"\"",
            "            echo \"Options:\"",
            "            echo \"-f, --file\"",
            "            echo \"-d, --directory\"",
            "            exit 0",
            "            ;;",
            "    esac",
            "}"
        ],
        "description": [
            "Function used to create a new file or folder while acception multiple paths",
            "and allowing to create any parenting folders."
        ]
    },
    "Countdown": {
        "prefix": "countdown",
        "body": [
            "function countdown() {",
            "",
            "    if [[ \"\\${#}\" == \"\" ]]; then",
            "        echo \"Syntax: countdown [PHRASE..]\"",
            "        exit 2",
            "    fi",
            "",
            "    printf \"%b%s%b\\n\" \"\\${blue}\" \"\\${*}\" \"\\${nc}\"",
            "    for ((i = 5 ; i > 0 ; i--)); do",
            "        printf \"%bContinuing in: %s%b\\r\" \"\\${light_gray}\" \"\\${i}\" \"\\${nc}\"",
            "        sleep 1",
            "    done",
            "    printf \"\\n\"",
            "}",
        ],
        "description": "Function used to output a countdown timer with a custom phrase."
    }
}
